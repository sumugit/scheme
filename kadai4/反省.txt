(define-syntax stream-cons
    (syntax-rules ()
        ((_ x y) (cons x (delay y)))
    ))

(define-syntax stream-car
    (syntax-rules ()
        ((_ x) (car x ))
    ))

(define-syntax stream-cdr
    (syntax-rules ()
        ((_ x) (force (cdr x)))
    ))

(define numbers (lambda ()
  (letrec ((stream
              (lambda (n) (stream-cons n (stream (+ n 1))))
          ))
          (stream 2))))

(define head (lambda (n L)
  (if (<= n 0) '()
      (cons (stream-car L) (head (- n 1) (stream-cdr L)))
      )))

(define sieve (lambda ()
  (letrec ((stream
              (lambda (num L)(if (= num 1) (stream-cons '2 (stream 2 (numbers))) (if (= (modulo (stream-car L) num) 0) (stream num (stream-cdr L)) (stream-cons (stream-car L) (stream (stream-car L) (stream num (stream-cdr L)))))))
          ))
          (stream 1 (numbers)))))


(define prime (lambda (n L)
  (if (<= n 0) '()
      (cons (stream-car L) (prime (- n 1) (stream-cdr L)))
      )
))
